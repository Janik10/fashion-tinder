{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { create } from 'zustand';\nimport * as SecureStore from 'expo-secure-store';\nexport var useAuthStore = create(function (set) {\n  return {\n    token: null,\n    user: null,\n    isLoading: true,\n    login: function () {\n      var _login = _asyncToGenerator(function* (email, password) {\n        try {\n          var response = yield fetch('http://localhost:3000/auth/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n          var data = yield response.json();\n          if (!response.ok) throw new Error(data.message);\n          yield SecureStore.setItemAsync('token', data.accessToken);\n          set({\n            token: data.accessToken,\n            user: data.user\n          });\n        } catch (error) {\n          throw error;\n        }\n      });\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }(),\n    register: function () {\n      var _register = _asyncToGenerator(function* (email, username, password) {\n        try {\n          var response = yield fetch('http://localhost:3000/auth/register', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              username: username,\n              password: password\n            })\n          });\n          var data = yield response.json();\n          if (!response.ok) throw new Error(data.message);\n          var loginResponse = yield fetch('http://localhost:3000/auth/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n          var loginData = yield loginResponse.json();\n          if (!loginResponse.ok) throw new Error(loginData.message);\n          yield SecureStore.setItemAsync('token', loginData.accessToken);\n          set({\n            token: loginData.accessToken,\n            user: loginData.user\n          });\n        } catch (error) {\n          throw error;\n        }\n      });\n      function register(_x3, _x4, _x5) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }(),\n    logout: function () {\n      var _logout = _asyncToGenerator(function* () {\n        yield SecureStore.deleteItemAsync('token');\n        set({\n          token: null,\n          user: null\n        });\n      });\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n  };\n});","map":{"version":3,"names":["create","SecureStore","useAuthStore","set","token","user","isLoading","login","_login","_asyncToGenerator","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","setItemAsync","accessToken","error","_x","_x2","apply","arguments","register","_register","username","loginResponse","loginData","_x3","_x4","_x5","logout","_logout","deleteItemAsync"],"sources":["E:/fashion-tinder/frontend/src/store/auth.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\ninterface AuthState {\r\n  token: string | null;\r\n  user: any | null;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>((set) => ({\r\n  token: null,\r\n  user: null,\r\n  isLoading: true,\r\n  login: async (email: string, password: string) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) throw new Error(data.message);\r\n\r\n      await SecureStore.setItemAsync('token', data.accessToken);\r\n      set({ token: data.accessToken, user: data.user });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  register: async (email: string, username: string, password: string) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, username, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) throw new Error(data.message);\r\n\r\n      // Auto login after registration\r\n      const loginResponse = await fetch('http://localhost:3000/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const loginData = await loginResponse.json();\r\n      if (!loginResponse.ok) throw new Error(loginData.message);\r\n\r\n      await SecureStore.setItemAsync('token', loginData.accessToken);\r\n      set({ token: loginData.accessToken, user: loginData.user });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  logout: async () => {\r\n    await SecureStore.deleteItemAsync('token');\r\n    set({ token: null, user: null });\r\n  },\r\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}