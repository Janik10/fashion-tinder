{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { create } from 'zustand';\nimport * as SecureStore from 'expo-secure-store';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar storage = {\n  setItem: function () {\n    var _setItem = _asyncToGenerator(function* (key, value) {\n      try {\n        if (Platform.OS === 'web') {\n          localStorage.setItem(key, value);\n        } else {\n          yield SecureStore.setItemAsync(key, value);\n        }\n      } catch (error) {\n        console.warn('Storage error:', error);\n      }\n    });\n    function setItem(_x, _x2) {\n      return _setItem.apply(this, arguments);\n    }\n    return setItem;\n  }(),\n  getItem: function () {\n    var _getItem = _asyncToGenerator(function* (key) {\n      try {\n        if (Platform.OS === 'web') {\n          return localStorage.getItem(key);\n        }\n        return yield SecureStore.getItemAsync(key);\n      } catch (error) {\n        console.warn('Storage error:', error);\n        return null;\n      }\n    });\n    function getItem(_x3) {\n      return _getItem.apply(this, arguments);\n    }\n    return getItem;\n  }(),\n  removeItem: function () {\n    var _removeItem = _asyncToGenerator(function* (key) {\n      try {\n        if (Platform.OS === 'web') {\n          localStorage.removeItem(key);\n        } else {\n          yield SecureStore.deleteItemAsync(key);\n        }\n      } catch (error) {\n        console.warn('Storage error:', error);\n      }\n    });\n    function removeItem(_x4) {\n      return _removeItem.apply(this, arguments);\n    }\n    return removeItem;\n  }()\n};\nimport { API_URL } from \"../config\";\nexport var useAuthStore = create(function (set) {\n  return {\n    token: null,\n    user: null,\n    isLoading: false,\n    setToken: function setToken(token) {\n      return set({\n        token: token\n      });\n    },\n    login: function () {\n      var _login = _asyncToGenerator(function* (email, password) {\n        try {\n          set({\n            isLoading: true\n          });\n          var response = yield fetch(`${API_URL}/auth/login`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n          var data = yield response.json();\n          if (!response.ok) {\n            throw new Error(data.message || 'Login failed');\n          }\n          yield storage.setItem('token', data.accessToken);\n          set({\n            token: data.accessToken,\n            user: data.user,\n            isLoading: false\n          });\n          console.log('Login successful', {\n            user: data.user\n          });\n        } catch (error) {\n          set({\n            isLoading: false\n          });\n          console.error('Login error:', error);\n          throw error;\n        }\n      });\n      function login(_x5, _x6) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }(),\n    register: function () {\n      var _register = _asyncToGenerator(function* (email, username, password) {\n        try {\n          var fakeToken = 'test-token-123';\n          var fakeUser = {\n            id: '1',\n            email: email || 'test@example.com',\n            username: username || 'testuser'\n          };\n          yield storage.setItem('token', fakeToken);\n          set({\n            token: fakeToken,\n            user: fakeUser,\n            isLoading: false\n          });\n          console.log('Registration successful', {\n            token: fakeToken,\n            user: fakeUser\n          });\n        } catch (error) {\n          console.error('Registration error:', error);\n          throw error;\n        }\n      });\n      function register(_x7, _x8, _x9) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }(),\n    logout: function () {\n      var _logout = _asyncToGenerator(function* () {\n        yield storage.removeItem('token');\n        set({\n          token: null,\n          user: null\n        });\n      });\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n  };\n});","map":{"version":3,"names":["create","SecureStore","Platform","storage","setItem","_setItem","_asyncToGenerator","key","value","OS","localStorage","setItemAsync","error","console","warn","_x","_x2","apply","arguments","getItem","_getItem","getItemAsync","_x3","removeItem","_removeItem","deleteItemAsync","_x4","API_URL","useAuthStore","set","token","user","isLoading","setToken","login","_login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","accessToken","log","_x5","_x6","register","_register","username","fakeToken","fakeUser","id","_x7","_x8","_x9","logout","_logout"],"sources":["E:/fashion-tinder/frontend/src/store/auth.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport * as SecureStore from 'expo-secure-store';\r\nimport { Platform } from 'react-native';\r\n\r\n// Helper function to handle token storage across platforms\r\nconst storage = {\r\n  async setItem(key: string, value: string) {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        localStorage.setItem(key, value);\r\n      } else {\r\n        await SecureStore.setItemAsync(key, value);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Storage error:', error);\r\n    }\r\n  },\r\n  async getItem(key: string): Promise<string | null> {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        return localStorage.getItem(key);\r\n      }\r\n      return await SecureStore.getItemAsync(key);\r\n    } catch (error) {\r\n      console.warn('Storage error:', error);\r\n      return null;\r\n    }\r\n  },\r\n  async removeItem(key: string) {\r\n    try {\r\n      if (Platform.OS === 'web') {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        await SecureStore.deleteItemAsync(key);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Storage error:', error);\r\n    }\r\n  }\r\n};\r\nimport { API_URL } from '../config';\r\n\r\ninterface AuthState {\r\n  token: string | null;\r\n  user: any | null;\r\n  isLoading: boolean;\r\n  setToken: (token: string | null) => void;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>((set) => ({\r\n  token: null,\r\n  user: null,\r\n  isLoading: false,\r\n  setToken: (token: string | null) => set({ token }),\r\n  login: async (email: string, password: string) => {\r\n    try {\r\n      set({ isLoading: true });\r\n      const response = await fetch(`${API_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n\r\n      await storage.setItem('token', data.accessToken);\r\n      set({ token: data.accessToken, user: data.user, isLoading: false });\r\n      console.log('Login successful', { user: data.user });\r\n    } catch (error) {\r\n      set({ isLoading: false });\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  register: async (email: string, username: string, password: string) => {\r\n    try {\r\n      // Temporary: Always succeed with test user\r\n      const fakeToken = 'test-token-123';\r\n      const fakeUser = {\r\n        id: '1',\r\n        email: email || 'test@example.com',\r\n        username: username || 'testuser',\r\n      };\r\n      \r\n      await storage.setItem('token', fakeToken);\r\n      set({ token: fakeToken, user: fakeUser, isLoading: false });\r\n      console.log('Registration successful', { token: fakeToken, user: fakeUser });\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  logout: async () => {\r\n    await storage.removeItem('token');\r\n    set({ token: null, user: null });\r\n  },\r\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}